packages:
  esphome.bluetooth-proxy: github://esphome/bluetooth-proxies/esp32-generic.yaml@main
esphome:
  name: ${name}
  name_add_mac_suffix: false
external_components:
  - source: github://myhomeiot/esphome-components

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

mqtt:
  broker: !secret mqtt_broker
  username: !secret mqtt_username
  password: !secret mqtt_password
logger:

ota:

ld2410:


bluetooth_proxy:
  active: true
button:
  - platform: ld2410
    factory_reset:
      name: "factory reset"
    restart:
      name: "restart"
    query_params:
      name: query params

number:
  - platform: template
    id: max_distance
    name: mqtt room distance 
    icon: mdi:signal-distance-variant
    entity_category: config
    min_value: 1.0
    max_value: 16.0
    initial_value: 16.0
    optimistic: true
    step: 0.1
    restore_value: true
    unit_of_measurement: meter
    mode: box
  - platform: template
    #The measured power is the RSSI value at one meter
    #https://stackoverflow.com/questions/65124232/how-to-get-distance-from-beacons
    id: measured_power
    name: Measured Power
    icon: mdi:rssi
    entity_category: config
    min_value: 20
    max_value: 100
    initial_value: 85
    optimistic: true
    step: 5
    restore_value: true
    unit_of_measurement: db
    mode: slider
  - platform: template
    #Environmental factor
    id: environmental_factor
    name: Environmental factor
    icon: mdi:rssi
    entity_category: config
    min_value: 2
    max_value: 4
    initial_value: 3
    optimistic: true
    step: 1
    restore_value: true
    mode: slider
  - platform: ld2410
    timeout:
      name: timeout
    light_threshold:
      name: light threshold
    max_move_distance_gate:
      name: max move distance gate
    max_still_distance_gate:
      name: max still distance gate
    g0:
      move_threshold:
        name: g0 move threshold
      still_threshold:
        name: g0 still threshold
    g1:
      move_threshold:
        name: g1 move threshold
      still_threshold:
        name: g1 still threshold
    g2:
      move_threshold:
        name: g2 move threshold
      still_threshold:
        name: g2 still threshold
    g3:
      move_threshold:
        name: g3 move threshold
      still_threshold:
        name: g3 still threshold
    g4:
      move_threshold:
        name: g4 move threshold
      still_threshold:
        name: g4 still threshold
    g5:
      move_threshold:
        name: g5 move threshold
      still_threshold:
        name: g5 still threshold
    g6:
      move_threshold:
        name: g6 move threshold
      still_threshold:
        name: g6 still threshold
    g7:
      move_threshold:
        name: g7 move threshold
      still_threshold:
        name: g7 still threshold
    g8:
      move_threshold:
        name: g8 move threshold
      still_threshold:
        name: g8 still threshold   
ble_gateway:
  id: blegateway
  on_ble_advertise:
    then:    
    #      - lambda: |-
    #          ESP_LOGD("ble_adv", "New BLE device");
    #          ESP_LOGD("ble_adv", "  tx_powers: %d", x.get_tx_powers().front());
      #    ESP_LOGD("ble_adv", "  name: %s", x.get_name().c_str());
      #    ESP_LOGD("ble_adv", "  Advertised service UUIDs:");
      #    for (auto uuid : x.get_service_uuids()) {
      #        ESP_LOGD("ble_adv", "    - %s", uuid.to_string().c_str());
      #    }
      #    ESP_LOGD("ble_adv", "  Advertised service data:");
      #    for (auto data : x.get_service_datas()) {
      #        ESP_LOGD("ble_adv", "    - %s: (length %i)", data.uuid.to_string().c_str(), data.data.size());
      #    }
      #    ESP_LOGD("ble_adv", "  Advertised manufacturer data:");
      #    for (auto data : x.get_manufacturer_datas()) {
      #        ESP_LOGD("ble_adv", "    - %s: (length %i)", data.uuid.to_string().c_str(), data.data.size());
      #    }
      #- if:
        #  condition:
        #    lambda: 'return x.get_name().length() > 3 or x.address_str() == "30:95:E3:E4:84:FB" ;'
        #then:
          - if:
              condition:
                lambda: 'return pow(10,(-1.0*(id(measured_power).state) - x.get_rssi())/(10.0*(id(environmental_factor).state))) < (id(max_distance).state);'
              then:
              - mqtt.publish_json:
                      topic: ${topic}
                      payload: |-
                        root["id"] = x.address_str();
                        root["name"] =  x.get_name();
                        root["rssi"] = std::to_string(x.get_rssi());
                        root["distance"] =  pow(10,(-1.0*(id(measured_power).state) - x.get_rssi())/(10.0*(id(environmental_factor).state)));
          - homeassistant.service:
              service: ble_monitor.parse_data
              data:
                packet: !lambda return packet;
                gateway_id: ${gateway_id}
binary_sensor:
  - platform: homeassistant
    id: ble_gateway_discovery
    entity_id: binary_sensor.ble_gateway
    attribute: discovery
    on_state:
      then:
        lambda: id(blegateway).set_discovery(x);
  - platform: ld2410
    has_target:
      name: Presence
    has_moving_target:
      name: Moving Target
    has_still_target:
      name: Still Target
    out_pin_presence_status:
      name: out pin presence status
text_sensor:
  - platform: ld2410
    version:
      name: "firmware version"
    mac_address:
      name: "mac address"
  - platform: homeassistant
    id: ble_gateway_devices
    entity_id: binary_sensor.ble_gateway
    attribute: devices
    on_value:
      then:
        lambda: id(blegateway).set_devices(x);

select:
  - platform: ld2410
    distance_resolution:
      name: "distance resolution"

    light_function:
      name: light function
    out_pin_level:
      name: out pin level

switch:
  - platform: template
    id: switch_ble_gateway_discovery
    name: BLE Gateway Discovery
    icon: mdi:bluetooth-connect
    restore_mode: RESTORE_DEFAULT_ON  
    lambda: return id(blegateway).get_discovery();
    turn_on_action: [lambda: id(blegateway).set_discovery(true);]
    turn_off_action: [lambda: id(blegateway).set_discovery(false);]
    entity_category: config

  - platform: ld2410
    engineering_mode:
      name: "engineering mode"
      restore_mode: RESTORE_DEFAULT_ON  
    bluetooth:
      name: "control bluetooth"
      restore_mode: RESTORE_DEFAULT_OFF




uart:
  tx_pin: 17
  rx_pin: 16
  baud_rate: 256000
  parity: NONE
  stop_bits: 1


sensor:
  - platform: ld2410
    light:
      name: light
    moving_distance:
      name : Moving Distance
    still_distance:
      name: Still Distance
    moving_energy:
      name: Move Energy
    still_energy:
      name: Still Energy
    detection_distance:
      name: Detection Distance
#    g0:
#      move_energy:
#        name: g0 move energy
#      still_energy:
#        name: g0 still energy
#    g1:
#      move_energy:
#        name: g1 move energy
#      still_energy:
#        name: g1 still energy
#    g2:
#      move_energy:
#        name: g2 move energy
#      still_energy:
#        name: g2 still energy
#    g3:
#      move_energy:
#        name: g3 move energy
#      still_energy:
#        name: g3 still energy
#    g4:
#      move_energy:
#        name: g4 move energy
#      still_energy:
#        name: g4 still energy
#    g5:
#      move_energy:
#        name: g5 move energy
#      still_energy:
#        name: g5 still energy
#    g6:
#      move_energy:
#        name: g6 move energy
#      still_energy:
#        name: g6 still energy
#    g7:
#      move_energy:
#        name: g7 move energy
#      still_energy:
#        name: g7 still energy
#    g8:
#      move_energy:
#        name: g8 move energy
#      still_energy:
#        name: g8 still energy
#
#
#